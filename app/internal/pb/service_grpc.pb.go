// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service.proto

package self_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegulationSupremeGRPCClient is the client API for RegulationSupremeGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegulationSupremeGRPCClient interface {
	CreateRegulation(ctx context.Context, in *Regulation, opts ...grpc.CallOption) (*ID, error)
	CreateChapter(ctx context.Context, in *Chapter, opts ...grpc.CallOption) (*ID, error)
	CreateParagraphs(ctx context.Context, in *Paragraphs, opts ...grpc.CallOption) (*Status, error)
	GenerateLinks(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
}

type regulationSupremeGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRegulationSupremeGRPCClient(cc grpc.ClientConnInterface) RegulationSupremeGRPCClient {
	return &regulationSupremeGRPCClient{cc}
}

func (c *regulationSupremeGRPCClient) CreateRegulation(ctx context.Context, in *Regulation, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/RegulationSupremeGRPC/createRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regulationSupremeGRPCClient) CreateChapter(ctx context.Context, in *Chapter, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/RegulationSupremeGRPC/createChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regulationSupremeGRPCClient) CreateParagraphs(ctx context.Context, in *Paragraphs, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/RegulationSupremeGRPC/createParagraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regulationSupremeGRPCClient) GenerateLinks(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/RegulationSupremeGRPC/GenerateLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegulationSupremeGRPCServer is the server API for RegulationSupremeGRPC service.
// All implementations must embed UnimplementedRegulationSupremeGRPCServer
// for forward compatibility
type RegulationSupremeGRPCServer interface {
	CreateRegulation(context.Context, *Regulation) (*ID, error)
	CreateChapter(context.Context, *Chapter) (*ID, error)
	CreateParagraphs(context.Context, *Paragraphs) (*Status, error)
	GenerateLinks(context.Context, *ID) (*Status, error)
	mustEmbedUnimplementedRegulationSupremeGRPCServer()
}

// UnimplementedRegulationSupremeGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRegulationSupremeGRPCServer struct {
}

func (UnimplementedRegulationSupremeGRPCServer) CreateRegulation(context.Context, *Regulation) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegulation not implemented")
}
func (UnimplementedRegulationSupremeGRPCServer) CreateChapter(context.Context, *Chapter) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChapter not implemented")
}
func (UnimplementedRegulationSupremeGRPCServer) CreateParagraphs(context.Context, *Paragraphs) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParagraphs not implemented")
}
func (UnimplementedRegulationSupremeGRPCServer) GenerateLinks(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLinks not implemented")
}
func (UnimplementedRegulationSupremeGRPCServer) mustEmbedUnimplementedRegulationSupremeGRPCServer() {}

// UnsafeRegulationSupremeGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegulationSupremeGRPCServer will
// result in compilation errors.
type UnsafeRegulationSupremeGRPCServer interface {
	mustEmbedUnimplementedRegulationSupremeGRPCServer()
}

func RegisterRegulationSupremeGRPCServer(s grpc.ServiceRegistrar, srv RegulationSupremeGRPCServer) {
	s.RegisterService(&RegulationSupremeGRPC_ServiceDesc, srv)
}

func _RegulationSupremeGRPC_CreateRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Regulation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulationSupremeGRPCServer).CreateRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegulationSupremeGRPC/createRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulationSupremeGRPCServer).CreateRegulation(ctx, req.(*Regulation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegulationSupremeGRPC_CreateChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chapter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulationSupremeGRPCServer).CreateChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegulationSupremeGRPC/createChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulationSupremeGRPCServer).CreateChapter(ctx, req.(*Chapter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegulationSupremeGRPC_CreateParagraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraphs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulationSupremeGRPCServer).CreateParagraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegulationSupremeGRPC/createParagraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulationSupremeGRPCServer).CreateParagraphs(ctx, req.(*Paragraphs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegulationSupremeGRPC_GenerateLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulationSupremeGRPCServer).GenerateLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegulationSupremeGRPC/GenerateLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulationSupremeGRPCServer).GenerateLinks(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// RegulationSupremeGRPC_ServiceDesc is the grpc.ServiceDesc for RegulationSupremeGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegulationSupremeGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RegulationSupremeGRPC",
	HandlerType: (*RegulationSupremeGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createRegulation",
			Handler:    _RegulationSupremeGRPC_CreateRegulation_Handler,
		},
		{
			MethodName: "createChapter",
			Handler:    _RegulationSupremeGRPC_CreateChapter_Handler,
		},
		{
			MethodName: "createParagraphs",
			Handler:    _RegulationSupremeGRPC_CreateParagraphs_Handler,
		},
		{
			MethodName: "GenerateLinks",
			Handler:    _RegulationSupremeGRPC_GenerateLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
